# -*- coding: utf-8 -*-
"""Medical_analyzer.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lcDV7HYxPY-mw6OV3md7gWyYPYNfA2ZU
"""
"""
 The df_cat created outside the functions and the one needed for draw_heat_map() would serve different purposes. 
 The current df_cat is structured for a categorical plot (showing counts of different variables), 
 but a heatmap typically needs a correlation matrix between numerical variables.
---------------------------------------------------------------------------------------------------------------
 The key differences are:

You shouldn't use df_cat for the heatmap because:

df_cat is aggregated categorical data
A heatmap needs numerical correlations between variables


Instead, the heatmap function:

Creates a new filtered dataset (df_heat) from the original df
Calculates correlations between numerical variables
Creates a triangular mask to show only half of the symmetric correlation matrix
Plots the heatmap using seaborn's heatmap function

"""
# https://www.freecodecamp.org/learn/data-analysis-with-python/data-analysis-with-python-projects/medical-data-visualizer

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

# 1
data = pd.read_csv(r'C:\Users\barba\OneDrive - University College London\Bioinformatics\FreeCode\Data analysis python certificate\medical_examination.csv')
df = pd.DataFrame(data)

""" 2 Add an overweight column to the data. To determine if a person is overweight,
first calculate their BMI by dividing their weight in kilograms by the square of their height in meters.
If that value is > 25 then the person is overweight. Use the value 0 for NOT overweight and the value 1 for overweight.
"""
df['overweight'] = df['weight']/((df['height'] * 100) **2)
df['overweight'] = df['overweight'].apply(lambda x: 1 if x > 25 else 0)
print('OVERWEIGHT', df['overweight'])


# 3

"""Normalize data by making 0 always good and 1 always bad.
If the value of cholesterol or gluc is 1, set the value to 0. If the value is more than 1, set the value to 1."""
df['cholesterol'] = df['cholesterol'].apply(lambda x: 0 if x == 1 else 1)
df['gluc'] = df['gluc'].apply(lambda x: 0 if x==1 else 1)

df_cat = pd.melt(df, 
                    id_vars=['cardio'],
                    value_vars=['cholesterol', 'gluc', 'smoke', 'alco', 'active', 'overweight'],
                    var_name='variable',
                    value_name='value')

# Count the occurrences and rename the count column to 'total'
df_cat = df_cat.groupby(['cardio', 'variable', 'value']).size().reset_index(name='total')

# Create catplot using the counts
fig = sns.catplot(data=df_cat,
                    kind="bar",
                    x="variable",
                    y="total",
                    hue="value",
                    col="cardio",
                    height=8)

fig.set_axis_labels("variable", "total")
plt.show()

print('DF CAT', df_cat)

# 4
def draw_cat_plot():
    # Create DataFrame for cat plot using pd.melt
    df_cat = pd.melt(df, 
                     id_vars=['cardio'],
                     value_vars=['cholesterol', 'gluc', 'smoke', 'alco', 'active', 'overweight'],
                     var_name='variable',
                     value_name='value')
    
    # Count the occurrences and rename the count column to 'total'
    df_cat = df_cat.groupby(['cardio', 'variable', 'value']).size().reset_index(name='total')
    
    # Create catplot using the counts
    fig = sns.catplot(data=df_cat,
                     kind="bar",
                     x="variable",
                     y="total",
                     hue="value",
                     col="cardio",
                     height=8)
    
    fig.set_axis_labels("variable", "total")

    fig.savefig('catplot.png')
    
    return fig


# 10
def draw_heat_map():

    
    # 11
    df_heat = df[df['ap_lo'] <= df['ap_hi']]
    df_heat = df_heat[df_heat['height'] >= df_heat['height'].quantile(0.025)]
    df_heat = df_heat[df_heat['height'] <= df_heat['height'].quantile(0.975)]
    df_heat = df_heat[df_heat['weight'] >= df_heat['weight'].quantile(0.025)]
    df_heat = df_heat[df_heat['weight'] <= df_heat['weight'].quantile(0.975)]

    # 12
    corr = df_heat.corr()

    # 13
    mask = np.triu(corr)



    # 14
    fig, ax = plt.subplots(figsize=(12, 12))

    # 15

    sns.heatmap(corr, mask=mask, annot=True, fmt='.1f', center=0, square=True, cmap='YlGnBu')

    # 16
    fig.savefig('heatmap.png')
    return fig